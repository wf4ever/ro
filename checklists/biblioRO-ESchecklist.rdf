<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rdf:RDF [
    <!ENTITY rdf     "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
    <!ENTITY rdfs    "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY owl     "http://www.w3.org/2002/07/owl#" >
    <!ENTITY xsd     "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY xml     "http://www.w3.org/XML/1998/namespace" >
    <!ENTITY rdfg    "http://www.w3.org/2004/03/trix/rdfg-1/" >
    <!ENTITY ore     "http://www.openarchives.org/ore/terms/" >
    <!ENTITY ao      "http://purl.org/ao/" >
    <!ENTITY dcterms "http://purl.org/dc/terms/" >
    <!ENTITY foaf    "http://xmlns.com/foaf/0.1/" >
    <!ENTITY ro      "http://purl.org/wf4ever/ro#" >
    <!ENTITY wfprov  "http://purl.org/wf4ever/wfprov#" >
    <!ENTITY wfdesc  "http://purl.org/wf4ever/wfdesc#" >
    <!ENTITY wf4ever "http://purl.org/wf4ever/wf4ever#" >
    <!ENTITY minim   "http://purl.org/minim/minim#" >
    <!ENTITY swrc		 "http://swrc.ontoware.org/ontology#">
    <!ENTITY roes 	 "http://w3id.org/ro/earth-science#" >
    <!ENTITY odrs 	 "http://schema.theodi.org/odrs#" >
    <!ENTITY roterms "http://purl.org/wf4ever/roterms#" >
    <!ENTITY cito    "http://purl.org/spar/cito/" >
    <!ENTITY dbo     "http://dbpedia.org/ontology/" >
    <!ENTITY bibo    "http://purl.org/ontology/bibo/" >
    <!ENTITY prov 	 "http://www.w3.org/ns/prov#" >
]>

<rdf:RDF xmlns="."
     xmlns:rdf="&rdf;"
     xmlns:rdfs="&rdfs;"
     xmlns:owl="&owl;"
     xmlns:xsd="&xsd;"
     xmlns:xml="&xml;"
     xmlns:rdfg="&rdfg;"
     xmlns:ore="&ore;"
     xmlns:ao="&ao;"
     xmlns:dcterms="&dcterms;"
     xmlns:foaf="&foaf;"
     xmlns:ro="&ro;"
     xmlns:wfprov="&wfprov;"
     xmlns:wfdesc="&wfdesc;"
     xmlns:wf4ever="&wf4ever;"
     xmlns:minim="&minim;"
     xmlns:swrc="&swrc;"
     xmlns:roes="&roes;"
     xmlns:odrs="&odrs;"
     xmlns:roterms="&roterms;"
     xmlns:cito="&cito;"
     xmlns:dbo="&dbo;"
     xmlns:bibo="&bibo;"
     xmlns:prov="&prov;"
>

  <!-- ===========
       CONSTRAINTS 
       ===========
    -->

  <!-- Target for Minimum information requirement 

       Minim invokes minimum information models for a specified purpose
       relating to a specified target.  The requirement may apply to some
       resource other than the specified target.
    -->

  <rdf:Description rdf:about="http://workflow-experiment#ChecklistConstraints">

    <minim:hasConstraint>
      <minim:Constraint rdf:about="#experiment-complete">
        <minim:forTargetTemplate>{+targetro}</minim:forTargetTemplate>
        <minim:forPurpose>ready-to-release</minim:forPurpose>
        <minim:toModel rdf:resource="#experiment_complete_model" />
        <!-- <minim:onResourceTemplate>{+targetro}</minim:onResourceTemplate> -->
        <rdfs:comment>
          Constraint to be satisfied if the target RO is to be considered a
          complete and fully-described experiment.
        </rdfs:comment>
      </minim:Constraint>
    </minim:hasConstraint>

    <minim:hasConstraint>
      <minim:Constraint rdf:about="#wf-accessible">
        <minim:forTargetTemplate>{+targetro}</minim:forTargetTemplate>
        <minim:forPurpose>wf-accessible</minim:forPurpose>
        <minim:toModel rdf:resource="#wf_accessible_model" />
        <rdfs:comment>
          Constraint to test workflow accessible item in isolation
        </rdfs:comment>
      </minim:Constraint>
    </minim:hasConstraint>
    

  </rdf:Description>

  <!-- ======
       MODELS
       ======
    -->

  <!-- Model (checklist) for complete experiment RO
    -->
  <minim:Model rdf:about="#experiment_complete_model">
    <rdfs:label>Complete experiment</rdfs:label>
    <rdfs:comment>
      This model defines information that must be satisfied by the target RO
      for the target RO to be considered a complete and fully-described experiment.
    </rdfs:comment>
    <minim:hasMustRequirement   rdf:resource="#RO_has_title" />
    <minim:hasMustRequirement 	rdf:resource="#RO_has_description" />
    <minim:hasMustRequirement 	rdf:resource="#RO_has_creator" />    
    <minim:hasMustRequirement 	rdf:resource="#RO_has_purpose" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_subject" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_copyrightholder" />
    <minim:hasMustRequirement   rdf:resource="#RO_has_bibliographicR" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_access_level" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_start_date" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_end_date" />
  </minim:Model>

  <!-- Model (checklist) for WF accessible
    -->
  <minim:Model rdf:about="#wf_accessible_model">
    <rdfs:label>Workflow accessible</rdfs:label>
    <rdfs:comment>
      Model to test workflow accessible item in isolation
    </rdfs:comment>
    <minim:hasMustRequirement rdf:resource="#WF_accessible" />
  </minim:Model>

  <!-- =================
       REQUIREMENT RULES
       =================
    -->
    
  <!-- RO title is present -->
  <minim:Requirement rdf:about="#RO_has_title">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:title ?rotitle .
        </minim:exists>
        <minim:showpass>Research Object has title</minim:showpass>
        <minim:showfail>Research Object does not have title. You must add annotation: title (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_title" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>001</minim:seq>
  </minim:Requirement>
  
  <!-- RO description is present -->
  <minim:Requirement rdf:about="#RO_has_description">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:description ?rodescription .
        </minim:exists>
        <minim:showpass>Research Object has description</minim:showpass>
        <minim:showfail>Research Object does not have description. You must add annotation: description (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_description" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>002</minim:seq>
  </minim:Requirement>

	<!-- RO creator is present -->
  <minim:Requirement rdf:about="#RO_has_creator">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
      	<minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:creator ?rocreator .
        </minim:exists>
        <minim:showpass>Research Object has creator</minim:showpass>
        <minim:showfail>Research Object does not have creator. You must add annotation: creator (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_creator" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>003</minim:seq>
  </minim:Requirement>
  
  <!-- RO purpose is present -->
  <minim:Requirement rdf:about="#RO_has_purpose">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro roterms:performsTask ?purpose .
        </minim:exists>
        <minim:showpass>Research Object has indicated purpose</minim:showpass>
        <minim:showfail>Research Object does not have indicated purpose. You must add annotation: performsTask (roterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_purpose" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>005</minim:seq>
  </minim:Requirement>
  
  <!-- RO subject is present -->
  <minim:Requirement rdf:about="#RO_has_subject">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:subject ?subject .
        </minim:exists>
        <minim:showpass>Research Object has subject</minim:showpass>
        <minim:showfail>Research Object does not have subject. You should add annotation: subject (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_subject" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>006</minim:seq>
  </minim:Requirement>
  
  <!-- RO copyright holder is present -->
  <minim:Requirement rdf:about="#RO_has_copyrightholder">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro odrs:copyrightHolder ?rocopyrightholder .
        </minim:exists>
        <minim:showpass>Research Object has copyright holder</minim:showpass>
        <minim:showfail>Research Object does not have copyright holder. You should add annotation: copyrightHolder (odrs vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_copyrightholder" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>007</minim:seq>
  </minim:Requirement>
  
  <!-- RO access level is present -->
  <minim:Requirement rdf:about="#RO_has_access_level">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro roes:distributionCategory ?accesslevel .
        </minim:exists>
        <minim:showpass>Research Object has access level specified</minim:showpass>
        <minim:showfail>Research Object does not have access level specified. You should add annotation: distributionCategory (roes vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_access_level" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>020</minim:seq>
  </minim:Requirement>
  
  <!-- RO start date is present -->
  <minim:Requirement rdf:about="#RO_has_start_date">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          {
          	?ro prov:generatedAtTime ?startdate .
          }
          UNION
          {
          	?ro prov:startedAtTime ?startdate .
          }
        </minim:exists>
        <minim:showpass>Research Object has start date specified</minim:showpass>
        <minim:showfail>Research Object does not have start date specified. You should add annotation: generatedAtTime or startedAtTime (prov vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_start_date" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>021</minim:seq>
  </minim:Requirement>
  
  <!-- RO end date is present -->
  <minim:Requirement rdf:about="#RO_has_end_date">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          {
          	?ro prov:invalidatedAtTime ?startdate .
          }
          UNION
          {
          	?ro prov:endedAtTime ?startdate .
          }
        </minim:exists>
        <minim:showpass>Research Object has end date specified</minim:showpass>
        <minim:showfail>Research Object does not have end date specified. You should add annotation: invalidatedAtTime or endedAtTime (prov vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_end_date" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>022</minim:seq>
  </minim:Requirement>
  
  <!--
        Experiment results, conclusions, etc
  -->	

  
  <!--
        Other diagnostics
  -->

  <!-- RO annotations bodies present -->
  <minim:Requirement rdf:about="#RO_live_annotations">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?astub rdf:type ro:AggregatedAnnotation ;
            ao:body ?abody .
        </minim:forall>
        <minim:isLiveTemplate>
          {+abody}
        </minim:isLiveTemplate>
        <minim:showpass>Annotations bodies are all accessible</minim:showpass>
        <minim:showfail>Annotation body %(abody)s for %(astub)s is not accessible</minim:showfail>
        <minim:derives rdf:resource="#RO_live_annotations" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>102</minim:seq>
  </minim:Requirement>
  
  <!-- has bibliographic resource -->
  <minim:Requirement rdf:about="#RO_has_bibliographicR">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
      	<minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro ore:aggregates [ rdf:type dcterms:BibliographicResource ] .
        </minim:exists>
        <minim:showpass>Bibliographic resource is present</minim:showpass>
        <minim:showfail>No bibliographic resource found. You must aggregate and annotate bibliographic resource with the appropriate type: BibliographicResource</minim:showfail>
        <minim:derives rdf:resource="#RO_has_data" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>010</minim:seq>
  </minim:Requirement>
  
 
  
  

</rdf:RDF>
