<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rdf:RDF [
    <!ENTITY rdf     "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
    <!ENTITY rdfs    "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY owl     "http://www.w3.org/2002/07/owl#" >
    <!ENTITY xsd     "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY xml     "http://www.w3.org/XML/1998/namespace" >
    <!ENTITY rdfg    "http://www.w3.org/2004/03/trix/rdfg-1/" >
    <!ENTITY ore     "http://www.openarchives.org/ore/terms/" >
    <!ENTITY ao      "http://purl.org/ao/" >
    <!ENTITY dcterms "http://purl.org/dc/terms/" >
    <!ENTITY foaf    "http://xmlns.com/foaf/0.1/" >
    <!ENTITY ro      "http://purl.org/wf4ever/ro#" >
    <!ENTITY wfprov  "http://purl.org/wf4ever/wfprov#" >
    <!ENTITY wfdesc  "http://purl.org/wf4ever/wfdesc#" >
    <!ENTITY wf4ever "http://purl.org/wf4ever/wf4ever#" >
    <!ENTITY minim   "http://purl.org/minim/minim#" >
    <!ENTITY swrc		 "http://swrc.ontoware.org/ontology#">
    <!ENTITY roes 	 "http://w3id.org/ro/earth-science#" >
    <!ENTITY odrs 	 "http://schema.theodi.org/odrs#" >
    <!ENTITY roterms "http://purl.org/wf4ever/roterms#" >
    <!ENTITY cito    "http://purl.org/spar/cito/" >
    <!ENTITY dbo     "http://dbpedia.org/ontology/" >
    <!ENTITY bibo    "http://purl.org/ontology/bibo/" >
]>

<rdf:RDF xmlns="."
     xmlns:rdf="&rdf;"
     xmlns:rdfs="&rdfs;"
     xmlns:owl="&owl;"
     xmlns:xsd="&xsd;"
     xmlns:xml="&xml;"
     xmlns:rdfg="&rdfg;"
     xmlns:ore="&ore;"
     xmlns:ao="&ao;"
     xmlns:dcterms="&dcterms;"
     xmlns:foaf="&foaf;"
     xmlns:ro="&ro;"
     xmlns:wfprov="&wfprov;"
     xmlns:wfdesc="&wfdesc;"
     xmlns:wf4ever="&wf4ever;"
     xmlns:minim="&minim;"
     xmlns:swrc="&swrc;"
     xmlns:roes="&roes;"
     xmlns:odrs="&odrs;"
     xmlns:roterms="&roterms;"
     xmlns:cito="&cito;"
     xmlns:dbo="&dbo;"
     xmlns:bibo="&bibo;"
>

  <!-- ===========
       CONSTRAINTS 
       ===========
    -->

  <!-- Target for Minimum information requirement 

       Minim invokes minimum information models for a specified purpose
       relating to a specified target.  The requirement may apply to some
       resource other than the specified target.
    -->

  <rdf:Description rdf:about="http://workflow-experiment#ChecklistConstraints">

    <minim:hasConstraint>
      <minim:Constraint rdf:about="#experiment-complete">
        <minim:forTargetTemplate>{+targetro}</minim:forTargetTemplate>
        <minim:forPurpose>ready-to-release</minim:forPurpose>
        <minim:toModel rdf:resource="#experiment_complete_model" />
        <!-- <minim:onResourceTemplate>{+targetro}</minim:onResourceTemplate> -->
        <rdfs:comment>
          Constraint to be satisfied if the target RO is to be considered a
          complete and fully-described experiment.
        </rdfs:comment>
      </minim:Constraint>
    </minim:hasConstraint>

    <minim:hasConstraint>
      <minim:Constraint rdf:about="#wf-accessible">
        <minim:forTargetTemplate>{+targetro}</minim:forTargetTemplate>
        <minim:forPurpose>wf-accessible</minim:forPurpose>
        <minim:toModel rdf:resource="#wf_accessible_model" />
        <rdfs:comment>
          Constraint to test workflow accessible item in isolation
        </rdfs:comment>
      </minim:Constraint>
    </minim:hasConstraint>
    

  </rdf:Description>

  <!-- ======
       MODELS
       ======
    -->

  <!-- Model (checklist) for complete experiment RO
    -->
  <minim:Model rdf:about="#experiment_complete_model">
    <rdfs:label>Complete experiment</rdfs:label>
    <rdfs:comment>
      This model defines information that must be satisfied by the target RO
      for the target RO to be considered a complete and fully-described experiment.
    </rdfs:comment>
    <minim:hasMustRequirement   rdf:resource="#RO_has_title" />
    <minim:hasMustRequirement 	rdf:resource="#RO_has_description" />
    <minim:hasMustRequirement 	rdf:resource="#RO_has_creator" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_contributor" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_purpose" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_subject" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_copyrightholder" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_access_level" />
    <minim:hasShouldRequirement rdf:resource="#RO_has_references" />
    <minim:hasMustRequirement 	rdf:resource="#RO_has_process_implementation"/> 
    <!-- <minim:hasMustRequirement   rdf:nodeID="Nb0d6e070b150465b880a2d97ef76d7ff"/>  process implementation available -->
    <minim:hasMustRequirement   rdf:resource="#PR_has_inputdata" />
    <minim:hasMustRequirement   rdf:resource="#PR_has_outputdata" />
    <minim:hasMustRequirement   rdf:resource="#RO_has_doi" />
     
  </minim:Model>

  <!-- Model (checklist) for WF accessible
    -->
  <minim:Model rdf:about="#wf_accessible_model">
    <rdfs:label>Workflow accessible</rdfs:label>
    <rdfs:comment>
      Model to test workflow accessible item in isolation
    </rdfs:comment>
    <minim:hasMustRequirement rdf:resource="#WF_accessible" />
  </minim:Model>

  <!-- =================
       REQUIREMENT RULES
       =================
    -->
    
  <!-- RO title is present -->
  <minim:Requirement rdf:about="#RO_has_title">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:title ?rotitle .
        </minim:exists>
        <minim:showpass>Research Object has title</minim:showpass>
        <minim:showfail>Research Object does not have title. You must add annotation: title (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_title" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>001</minim:seq>
  </minim:Requirement>
  
  <!-- RO description is present -->
  <minim:Requirement rdf:about="#RO_has_description">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:description ?rodescription .
        </minim:exists>
        <minim:showpass>Research Object has description</minim:showpass>
        <minim:showfail>Research Object does not have description. You must add annotation: description (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_description" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>002</minim:seq>
  </minim:Requirement>

	<!-- RO creator is present -->
  <minim:Requirement rdf:about="#RO_has_creator">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
      	<minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:creator ?rocreator .
        </minim:exists>
        <minim:showpass>Research Object has creator</minim:showpass>
        <minim:showfail>Research Object does not have creator. You must add annotation: creator (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_creator" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>003</minim:seq>
  </minim:Requirement>
  
  <!-- RO contributor is present -->
  <minim:Requirement rdf:about="#RO_has_contributor">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:contributor ?contributor .
        </minim:exists>
        <minim:showpass>Research Object has contributor</minim:showpass>
        <minim:showfail>Research Object does not have contributor. You should add annotation: contributor (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_contributor" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>004</minim:seq>
  </minim:Requirement>
  
  <!-- RO purpose is present -->
  <minim:Requirement rdf:about="#RO_has_purpose">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro roterms:performsTask ?purpose .
        </minim:exists>
        <minim:showpass>Research Object has indicated purpose</minim:showpass>
        <minim:showfail>Research Object does not have indicated purpose. You should add annotation: performsTask (roterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_purpose" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>005</minim:seq>
  </minim:Requirement>
  
  <!-- RO subject is present -->
  <minim:Requirement rdf:about="#RO_has_subject">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:subject ?subject .
        </minim:exists>
        <minim:showpass>Research Object has subject</minim:showpass>
        <minim:showfail>Research Object does not have subject. You should add annotation: subject (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_subject" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>006</minim:seq>
  </minim:Requirement>
  
  <!-- RO copyright holder is present -->
  <minim:Requirement rdf:about="#RO_has_copyrightholder">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro odrs:copyrightHolder ?rocopyrightholder .
        </minim:exists>
        <minim:showpass>Research Object has copyright holder</minim:showpass>
        <minim:showfail>Research Object does not have copyright holder. You should add annotation: copyrightHolder (odrs vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_copyrightholder" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>007</minim:seq>
  </minim:Requirement>
  
  <!-- RO access level is present -->
  <minim:Requirement rdf:about="#RO_has_access_level">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro roes:distributionCategory ?accesslevel .
        </minim:exists>
        <minim:showpass>Research Object has access level specified</minim:showpass>
        <minim:showfail>Research Object does not have access level specified. You should add annotation: distributionCategory (roes vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_access_level" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>008</minim:seq>
  </minim:Requirement>
  
  <!-- RO references is present -->
  <minim:Requirement rdf:about="#RO_has_references">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro dcterms:references ?references .
        </minim:exists>
        <minim:showpass>Research Object has references</minim:showpass>
        <minim:showfail>Research Object does not have references. You should add annotation: references (dcterms vocabulary)</minim:showfail>
        <minim:derives rdf:resource="#RO_has_references" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>009</minim:seq>
  </minim:Requirement>
  
  <!-- Process implementation is present -->
  <rdf:Description rdf:about="#RO_has_process_implementation">
    <minim:seq>010</minim:seq>
    <rdf:type rdf:resource="http://purl.org/minim/minim#Requirement"/>
    <minim:isDerivedBy rdf:resource="#req_process_implementation"/>
  </rdf:Description>
  
  <rdf:Description rdf:about="#req_process_implementation">
    <rdf:type rdf:resource="http://purl.org/minim/minim#QueryTestRule"/>
    <!--<minim:showfail>Process implementation %(wfdef)s for %(wf)s is not accessible. The implementation is invoked when running a process (e.g., workflow definition (t2flow, ga, kar), command-line, script, web-service). With a .t2flow, use "Annotate and Transform" in ROHUB to create the anotation.</minim:showfail>-->
    <minim:showfail>No process implementation found. You must aggregate and annotate the implementation invoked when running a process (e.g., workflow definition (t2flow, ga, kar), command-line, script, web-service)</minim:showfail>
    <minim:exists rdf:nodeID="Nc25db8dd938a4c2e94a250353e420830"/>
    <minim:showpass>One or more process implementations found. The implementation is invoked when running a process (e.g., workflow definition (t2flow, ga, kar), command-line, script, web-service).</minim:showpass>
  </rdf:Description>
  
  <!-- this query should be revised when the implementation is updated. E.g., (i) when adding a workflow, it should be added type
  type wfdesc:Workflow, and if its executable file, also wfdesc:WorkflowDefinition, (ii) when adding a process, e.g., command-line, 
  script (BeanShell, Python, R), or web-service (SOAP, REST) it should be added type wfdesc:Process and, if its executable, the type 
  of executable process, e.g., command-line, script (BeanShell, Python, R), or web-service (SOAP, REST)
  		{
    		?pr rdf:type wfdesc:Process
  			; wfdesc:hasImplementation ?imp .
  		}
  		UNION
  		{
  			?wf rdf:type wfdesc:Workflow
  			; wfdesc:hasWorkflowDefinition ?wfdef .
  		}
  -->  
  <rdf:Description rdf:nodeID="Nc25db8dd938a4c2e94a250353e420830">
    <minim:sparql_query>
    	{
    		?ro ore:aggregates [ rdf:type wfdesc:Process ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wfdesc:Workflow ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wf4ever:CommandLineTool ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wf4ever:Script ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wf4ever:BeanShellScript ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wf4ever:PythonScript ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wf4ever:RScript ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wf4ever:WebService ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wf4ever:RESTService ] .
  		}
  		UNION
  		{
  			?ro ore:aggregates [ rdf:type wf4ever:SOAPService ] .
  		}
  	</minim:sparql_query>
  </rdf:Description>
  
  
  <!-- Process input data is present -->
  <minim:Requirement rdf:about="#PR_has_inputdata">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          {
           ?wf rdf:type wfdesc:Workflow .
          }
          UNION
          {
           ?wf rdf:type wfdesc:Process .
          }
          UNION
          {
           ?wf rdf:type wf4ever:CommandLineTool .
          }
          UNION
  				{
  				 ?wf rdf:type wf4ever:Script .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:BeanShellScript .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:PythonScript .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:RScript .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:WebService .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:RESTService .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:SOAPService .
  				}
          FILTER  EXISTS { ?ro ore:aggregates ?wf}
        </minim:forall>
        <minim:exists>
          ?wf wfdesc:hasInput ?input .
        </minim:exists>
        <minim:showpass>All processes (e.g., workflow, command-line, script, web-service) have input defined</minim:showpass>
        <minim:showfail>One or more process (e.g., workflow, command-line, script, web-service) has no input defined, including &lt;i&gt;%(wf)s &lt;/i&gt;. You must add annotation link hasInput (wfdesc vocabulary)</minim:showfail>
        <minim:showmiss>No process implementation (e.g., workflow, command-line, script, web-service) found (for checking input data)</minim:showmiss>
        <minim:derives rdf:resource="#PR_has_inputdata" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>011</minim:seq>
  </minim:Requirement>
  
  <!-- Process output data is present -->
  <minim:Requirement rdf:about="#PR_has_outputdata">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          {
           ?wf rdf:type wfdesc:Workflow .
          }
          UNION
          {
           ?wf rdf:type wfdesc:Process .
          }
          UNION
          {
           ?wf rdf:type wf4ever:CommandLineTool .
          }
          UNION
  				{
  				 ?wf rdf:type wf4ever:Script .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:BeanShellScript .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:PythonScript .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:RScript .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:WebService .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:RESTService .
  				}
  				UNION
  				{
  				 ?wf rdf:type wf4ever:SOAPService .
  				}
          FILTER  EXISTS { ?ro ore:aggregates ?wf}
        </minim:forall>
        <minim:exists>
          ?wf wfdesc:hasOutput ?input .
        </minim:exists>
        <minim:showpass>All processes (e.g., workflow, command-line, script, web-service) have output defined</minim:showpass>
        <minim:showfail>One or more process (e.g., workflow, command-line, script, web-service) has no output defined, including &lt;i&gt;%(wf)s &lt;/i&gt;. You must add annotation link hasOutput (wfdesc vocabulary)</minim:showfail>
        <minim:showmiss>No process implementation (e.g., workflow, command-line, script, web-service) found (for checking output data)</minim:showmiss>
        <minim:derives rdf:resource="#PR_has_outputdata" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>012</minim:seq>
  </minim:Requirement>
  
  
  <!-- RO DOI is present -->
  <minim:Requirement rdf:about="#RO_has_doi">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          ?ro rdf:type ro:ResearchObject .
          FILTER NOT EXISTS { ?ro rdf:type ore:AggregatedResource }
          FILTER NOT EXISTS { ?ro rdf:type roterms:WorkflowRunBundle  }
        </minim:forall>
        <minim:exists>
          ?ro bibo:doi ?doi ;
              dcterms:identifier ?doi .
        </minim:exists>
        <minim:showpass>Research Object has DOI</minim:showpass>
        <minim:showfail>Research Object does not have DOI. You must make a release (snapshot/archive) of the research object with a DOI</minim:showfail>
        <minim:derives rdf:resource="#RO_has_doi" />
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
    <minim:seq>020</minim:seq>
  </minim:Requirement>
  
  

  <!--
        Experiment results, conclusions, etc
  -->	

  
  <!--
        Other diagnostics
  -->

  
  
  

</rdf:RDF>
